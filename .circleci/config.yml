# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

references:
  app_containers: &app_containers
    docker:
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          RACK_ENV: test
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: mediators_ci_test
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: family-justice


jobs:
  test:
    <<: *app_containers
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: cp config/database.ci.yml config/database.yml
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Run tests
      - run: bundle exec rake

      # Report only on master
      - run: "if [[ $CIRCLE_BRANCH =~ (master) ]] ; then bundle exec codeclimate-test-reporter ; fi"

  build_staging:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg BUILD_DATE=${BUILD_DATE} \
              --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"

  deploy_staging:
    <<: *cloud_container
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context staging

      - deploy:
          name: rolling update image to staging
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n family-mediators-api-staging \
                    deployment/family-mediators-api-deployment-staging \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n family-mediators-api-staging \
                    deployment/family-mediators-api-deployment-staging \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

  tag_production:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: promote staging image to production
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker pull "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                       "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

  deploy_production:
    <<: *cloud_container
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context production

      - deploy:
          name: rolling update image to production
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n family-mediators-api-production \
                    deployment/family-mediators-api-deployment-production \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n family-mediators-api-production \
                    deployment/family-mediators-api-deployment-production \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"


workflows:
  version: 2

  test-build-deploy:
    jobs:
      - test
      - build_staging:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
      - approve_production:
          type: approval
          requires:
            - deploy_staging
      - tag_production:
          requires:
            - approve_production
      - deploy_production:
          requires:
            - tag_production
